import org.mskcc.util.email.Email
import org.mskcc.util.email.EmailConfiguration
import org.mskcc.util.email.EmailToMimeMessageConverter
import org.mskcc.util.email.JavaxEmailSender

group 'org.mskcc.kickoff.lims'
version '1.24.29'

apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: "jacoco"

mainClassName = "org.mskcc.kickoff.lims.CreateManifestSheet"

sourceCompatibility = 1.8

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "${nexusUrlReleases}" }
        maven { url "${nexusUrlSnapshots}" }
    }
    dependencies {
        classpath 'javax.mail:javax.mail-api:1.5.6'
        classpath 'com.sun.mail:javax.mail:1.5.5'
        classpath group: 'org.mskcc.common', name: 'common-domain', version: '2.9.0'
    }
}

repositories {
    mavenCentral()
    maven { url "https://maven.atlassian.com/maven-external/" }
    maven { url "${nexusUrlReleases}" }
    maven { url "${nexusUrlSnapshots}" }
    mavenLocal()
}

dependencies {
    compile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.1'
    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.9'
    compile group: 'org.apache.poi', name: 'poi', version: '3.9'

    compile group: 'javax.mail', name: 'mail', version: '1.4.1'

    compile group: 'org.springframework', name: 'spring-context', version: '5.0.2.RELEASE'
    compile group: 'org.springframework', name: 'spring-core', version: '5.0.2.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version: '5.0.2.RELEASE'
    compile group: 'org.springframework', name: 'spring-web', version: '5.0.2.RELEASE'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.10.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.10.0'

    compile group: 'com.google.guava', name: 'guava', version: '11.0.2'
    compile group: 'com.github.spullara.cli-parser', name: 'cli-parser', version: '1.1'

    compile group: 'com.atlassian.jira', name: 'jira-rest-java-client-core', version: '2.0.0-m25'
    compile 'com.atlassian.httpclient:atlassian-httpclient-spi:0.17.0-m01'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.3'

    // msk+sapio
    compile 'com.velox.internalproducts:veloxapi:10.6.1-b777'
    compile 'com.velox.internalproducts:sapioutils:15.0.0-LIMS10.6.1'
    compile 'com.velox.internalproducts:sapio-commons:15.0.0-LIMS10.6.1'
    compile 'org.mskcc.common:common-domain:2.12.0-SNAPSHOT'

    compile group: 'log4j', name: 'apache-log4j-extras', version: '1.1'

    compile('junit:junit:4.12') {
        exclude group: 'org.hamcrest'
    }

    compile('org.mockito:mockito-core:1.10.19') {
        exclude group: 'org.hamcrest'
    }

    compile 'org.hamcrest:hamcrest-core:1.3'
    compile 'org.hamcrest:hamcrest-all:1.3'
    compile group: 'org.springframework', name: 'spring-test', version: '5.0.2.RELEASE'

    testCompile ('org.assertj:assertj-core:3.9.0') {
        exclude group: 'org.hamcrest'
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}


tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                def message = '\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength)
                println(message)

                if (result.failedTestCount > 0) {
                    sendNotification(message)
                }
            }
        }
    }
}

private void sendNotification(String message) {
    println("Sending integration tests notfication email to: ${integrationTestsNotificationTo}")
    JavaxEmailSender emailSender = new JavaxEmailSender(new EmailToMimeMessageConverter());

    def String[] recipients = integrationTestsNotificationTo.split(',')
    EmailConfiguration emailConfiguration = new EmailConfiguration(Arrays.asList(recipients), integrationTestsNotificationFrom, integrationTestsNotificationHost);
    Email email = new Email.Builder(emailConfiguration, "Pipeline Kickoff Integration Test FAILURE", message)
            .withTitle("Hello,")
            .withFooter(":(")
            .build();

    emailSender.send(email);
}

run {
    if (System.getProperty('DEBUG', 'false') == 'true') {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5006'
    }

    if (project.hasProperty('programArgs')) {
        args(programArgs.split(','))
    }
    systemProperties = System.properties
    environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: "prod,igo"
}


sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
        compileClasspath += sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    }
}

configurations {
    integrationTestCompile.extendsFrom compile
    integrationTestRuntime.extendsFrom runtime
    antMail
}

task integrationTest(type: Test) {
    filter {
        includeTestsMatching "org.mskcc.kickoff.fast.*"
    }

    if (System.getProperty('DEBUG', 'false') == 'true')
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5006'

    systemProperties System.properties
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    description = "Integration Tests"
    outputs.upToDateWhen { false }
    environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: "test,tango"
}

task regressionTest(type: Test) {
    filter {
        includeTestsMatching "org.mskcc.kickoff.characterisationTest.RegressionTest"
    }

    if (System.getProperty('DEBUG', 'false') == 'true')
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5006'

    systemProperties System.properties
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    description = "Regression Tests"
    outputs.upToDateWhen { false }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Create Manifest Sheet',
                'Implementation-Version': version,
                'Main-Class': 'org.mskcc.kickoff.lims.CreateManifestSheet'
    }
    baseName = project.name
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    destinationDir = file("$rootDir/build/fatJar")
    with jar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(
                    url: "${nexusUrlReleases}") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }
            snapshotRepository(
                    url: "${nexusUrlSnapshots}") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }
        }
    }
}

configurations { antClasspath }
dependencies {
    antClasspath 'ant:ant-javamail:1.6.5'
    antClasspath 'javax.activation:activation:1.1.1'
    antClasspath 'javax.mail:mail:1.4.7'
}
ClassLoader antClassLoader = org.apache.tools.ant.Project.class.classLoader
configurations.antClasspath.each { File jar ->
    println "Adding to ant classpath : " + jar.absolutePath
    antClassLoader.addURL(jar.toURI().toURL())
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/reports/jacoco"
    }
}




