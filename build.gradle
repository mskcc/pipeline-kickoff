group 'org.mskcc.kickoff.lims'
version '1.2.0-SNAPSHOT'

apply plugin: 'application'
apply plugin: "maven"

mainClassName = "org.mskcc.kickoff.lims.CreateManifestSheet"

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    compile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.1'
    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.9'
    compile group: 'javax.mail', name: 'mail', version: '1.4.1'
    compile group: 'org.springframework', name: 'spring-context', version: '4.3.7.RELEASE'
    compile group: 'org.springframework', name: 'spring-core', version: '4.3.7.RELEASE'
    compile group: 'log4j', name: 'log4j', version: '1.2.16'
    compile group: 'org.dbunit', name: 'dbunit', version: '2.4.3'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.5'
    compile group: 'com.google.guava', name: 'guava', version: '11.0.2'
    compile fileTree(dir: 'libs', include: '*.jar')
    compile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'org.springframework', name: 'spring-test', version: '4.3.7.RELEASE'

    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
}

tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

run {
    if (System.getProperty('DEBUG', 'false') == 'true') {
        jvmArgs '-Xdebug',
                '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5006'
    }

    if (project.hasProperty('programArgs')) {
        args(programArgs.split(','))
    }
    systemProperties = System.properties
    environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: "prod,igo"
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
        compileClasspath += sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    }
}

configurations {
    integrationTestCompile.extendsFrom compile
    integrationTestRuntime.extendsFrom runtime
}

task integrationTest(type: Test) {
    filter {
        includeTestsMatching "org.mskcc.kickoff.sampleset.*"
    }

    if (System.getProperty('DEBUG', 'false') == 'true')
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5006'

    systemProperties System.properties
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    description = "Integration Tests"
    outputs.upToDateWhen { false }
    environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: "test,tango"
}

task regressionTest(type: Test) {
    filter {
        includeTestsMatching "org.mskcc.kickoff.characterisationTest.RegressionTest"
    }

    if (System.getProperty('DEBUG', 'false') == 'true')
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5006'

    systemProperties System.properties
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    description = "Regression Tests"
    outputs.upToDateWhen { false }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Create Manifest Sheet',
                'Implementation-Version': version,
                'Main-Class': 'org.mskcc.kickoff.lims.CreateManifestSheet'
    }
    baseName = project.name
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    destinationDir = file("$rootDir/build/fatJar")
    with jar
}

